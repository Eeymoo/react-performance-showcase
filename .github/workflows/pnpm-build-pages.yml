name: PNPM React CI/CD to GitHub Pages

on:
  push:
    branches:
      - main   # 主分支触发部署
      - dev    # 开发分支触发测试构建
  pull_request:
    branches:
      - main   # PR到主分支时运行测试

jobs:
  build-test:
    name: Build and Test with PNPM
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          cache: 'pnpm' # 启用 pnpm 缓存
          
      # 安装 PNPM (如果未预装)
      - name: Install PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8.x
          
      # PNPM 缓存设置
      - name: Configure PNPM cache
        uses: pnpm/action-setup@v2
        with:
          run_install: false
          
      # 安装依赖（使用 PNPM 缓存）
      - name: Install dependencies with PNPM
        run: pnpm install --frozen-lockfile
        
      # 运行代码规范检查
      - name: Run linting
        run: pnpm lint
        
      # 运行测试
      - name: Run tests
        run: pnpm test -- --coverage
        env:
          CI: true
          
      # 构建生产包
      - name: Build production bundle
        run: pnpm build
          
      # 保存构建产物（用于部署阶段）
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: react-build
          path: build/ # create-react-app 默认输出目录

  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-test    # 依赖构建任务完成
    if: ${{ github.ref == 'refs/heads/main' }} # 仅主分支部署
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # 下载构建产物
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: react-build
          path: build/
          
      # 部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
          # 配置单页应用路由
          enable_jekyll: false # 禁用 Jekyll 处理
          # 可选的 CNAME 设置 (如果有自定义域名)
          # cname: yourdomain.com
          
      # 删除构建产物以节省空间
      - name: Clean up artifacts
        run: rm -rf build/
        
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: deploy-pages
    if: ${{ always() }} # 无论部署是否成功都发送通知
    
    steps:
      - name: Get deployment status
        id: deployment_status
        run: echo "status=${{ job.status }}" >> $GITHUB_OUTPUT
        
      # 部署成功通知
      - name: Send success notification
        if: ${{ steps.deployment_status.outputs.status == 'success' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: "React App 已成功部署到 GitHub Pages! 🚀\n访问地址: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          SLACK_COLOR: "#36a64f"
        
      # 部署失败通知
      - name: Send failure notification
        if: ${{ steps.deployment_status.outputs.status == 'failure' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: "⚠️ 部署到 GitHub Pages 失败! \n请检查构建日志: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          SLACK_COLOR: "#ff0000"
